#!/usr/bin/env ruby

puts "--- :buildkite: Downloading `rspec.xml`"
`buildkite-agent artifact download "rspec.xml" .`

puts "--- :junit: Parsing file"

require 'nokogiri'

xml = File.read("rspec.xml")
doc = Nokogiri::XML(xml)

class Failure < Struct.new(:name, :classname, :body); end

all_failures = []

doc.search('//testcase').each do |testcase|
  name = testcase['name']
  classname = testcase['classname']
  failures = testcase.search("failure")

  if failures.any?
    puts "#{name} had #{failures.length} failure"
    failures.each do |failure|
      all_failures << Failure.new(name, classname, failure.text.chomp)
    end
  end
end

puts "--- Checking failures"

if all_failures.empty?
  puts "No failures, all good!"
  exit 0
end

puts "--- Preparing annotation"

buffer = "There were #{all_failures.length} failures:\n"
all_failures.each do |failure|
  buffer << "#{failure.name} in #{failure.classname}\n"
  buffer << "---\n"
  buffer << "#{failure.body}\n"
  buffer << "---\n"
  buffer << "\n"
end
puts buffer

puts "--- Creating annotation"

require 'uri'
require 'net/http'
require 'net/https'
require 'json'
require 'base64'

graphql_query = <<-GRAPHQL
mutation MakeIT($buildID: ID!, $body: String!) {
  annotationCreate(input:{buildID:$buildID, body:$body, style:ERROR}) {
    annotationEdge {
      node {
        id
        body
        style
      }
    }
  }
}
GRAPHQL

build_id = ENV.fetch("BUILDKITE_BUILD_ID")
variables = { body: buffer, buildID: Base64.strict_encode64(["Build", build_id].join("---")).force_encoding('UTF-8') }

api_key = ENV.fetch("GRAPHQL_API_KEY")

uri = URI.parse("http://graphql.buildkite.dev/v1")
https = Net::HTTP.new(uri.host, uri.port)
https.use_ssl = false

req = Net::HTTP::Post.new(uri.path, { 'Content-Type' =>'application/json', 'Authorization' => "Bearer #{api_key}" })
req.body = JSON.generate({ query: graphql_query, variables: variables })
res = https.request(req)
puts "Response #{res.code} #{res.message}: #{res.body}"

